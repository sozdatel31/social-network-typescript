{"version":3,"sources":["hoc/withAuthRedirect.tsx","Components/Dialogs/Dialogs.module.css","Components/Dialogs/DialogsItem/DialogsItem.module.css","Components/Dialogs/Messages/Dialogs.module.css","Components/Dialogs/DialogsItem/DialogsItem.tsx","Components/Dialogs/Messages/Messages.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","DialogsItem","className","s","dialogsItems","id","name","Messages","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","requiredField","Dialogs","dialogElement","dialogsPage","dialogsData","map","d","messageElement","messageData","m","dialogs","formData","addMessage","newMessageBody","compose","dispatch","text","addMessageAC","withRouter"],"mappings":"0LASMA,EAAkB,SAACC,GACrB,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAIpB,SAASE,EAAoBC,GAUhC,OAFiCC,YAAQN,EAARM,EAPP,SAACC,GACKA,EAAxBL,OADiD,IACtCM,EADqC,YACxBD,EADwB,YAEpD,OAAKA,EAAML,OAEJ,cAACG,EAAD,eAAeG,IAFI,cAAC,IAAD,CAAUC,GAAG,gB,oBCjB/CC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,QAAU,2B,oBCA5GD,EAAOC,QAAU,CAAC,QAAU,6BAA6B,aAAe,kCAAkC,QAAU,+B,oBCApHD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,QAAU,2B,+GCU7FC,MANf,SAAqBL,GACjB,OAAQ,qBAAKM,UAAWC,IAAEC,aAAlB,SACJ,cAAC,IAAD,CAASN,GAAI,YAAcF,EAAMS,GAAjC,SAAsCT,EAAMU,U,kBCIrCC,MANf,SAAkBX,GACd,OACI,qBAAKM,UAAWC,IAAEK,QAAlB,SAA4BZ,EAAMY,W,kCC8B1C,IAAMC,EAAcC,YAAiB,IAkB/BC,EAAsBC,YAAwB,CAACC,KAAM,wBAA/BD,EAjBL,SAAChB,GACpB,OACI,uBAAMkB,SAAUlB,EAAMmB,aAAtB,UACI,8BACI,cAACC,EAAA,EAAD,CAAOC,UAAWC,IACXZ,KAAM,iBACNa,YAAa,qBACZC,SAAU,CAACC,IAAeZ,OAGtC,8BACI,yDAQDa,EA3Cf,SAAiB1B,GACb,IAAM2B,EAAgB3B,EAAM4B,YAAYC,YAAYC,KAAI,SAACC,GACrD,OAAO,cAAC,EAAD,CAAatB,GAAIsB,EAAEtB,GAAIC,KAAMqB,EAAErB,UAGpCsB,EAAiBhC,EAAM4B,YAAYK,YAAYH,KAAI,SAACI,GACtD,OAAO,cAAC,EAAD,CAAUzB,GAAIyB,EAAEzB,GAAIG,QAASsB,EAAEtB,aAK1C,OACI,sBAAKN,UAAWC,IAAE4B,QAAlB,UACI,qBAAK7B,UAAWC,IAAEC,aAAlB,SACKmB,IAEL,sBAAKrB,UAAWC,IAAEK,QAAlB,UACKoB,EACD,cAACjB,EAAD,CAAqBG,SAVP,SAACkB,GACvBpC,EAAMqC,WAAWD,EAASE,0B,+BCQnBC,sBACXxC,aAdoB,SAACL,GACrB,MAAO,CACHkC,YAAalC,EAAMkC,YACnBjC,OAAQD,EAAME,KAAKD,WAGA,SAAC6C,GACxB,MAAO,CACHH,WAAY,SAACI,GACTD,EAASE,YAAaD,SAM9BE,IACA9C,IAHW0C,CAITb","file":"static/js/3.4a836722.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n       let {isAuth, ...restProps} = props\r\n        if (!props.isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__3YDOg\",\"dialogsItems\":\"Dialogs_dialogsItems__1eBoO\",\"message\":\"Dialogs_message__2-Otq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"DialogsItem_dialogs__2tCTG\",\"dialogsItems\":\"DialogsItem_dialogsItems__21Gq7\",\"message\":\"DialogsItem_message__3p2zP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__CfByv\",\"dialogsItems\":\"Dialogs_dialogsItems__2AW3K\",\"message\":\"Dialogs_message__2ztoN\"};","import React from \"react\";\r\nimport s from \"./DialogsItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {DialogsType} from \"../../../Redux/storeX\";\r\n\r\nfunction DialogsItem(props: DialogsType) {\r\n    return (<div className={s.dialogsItems}>\r\n        <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n    </div>)\r\n}\r\n\r\nexport default DialogsItem;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport {MessageType} from \"../../../Redux/dialogs-reducer\";\r\n\r\n\r\nfunction Messages(props: MessageType) {\r\n    return (\r\n        <div className={s.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default Messages;","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\"\r\nimport DialogsItem from \"./DialogsItem/DialogsItem\";\r\nimport Messages from \"./Messages/Messages\";\r\nimport {DialogsContainerType} from \"./DialogsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../common/FormControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../utils/validators/validators\";\r\n\r\n\r\ntype FormDataType = {\r\n    newMessageBody: string,\r\n}\r\n\r\nfunction Dialogs(props: DialogsContainerType) {\r\n    const dialogElement = props.dialogsPage.dialogsData.map((d) => {\r\n        return <DialogsItem id={d.id} name={d.name}/>\r\n    })\r\n\r\n    const messageElement = props.dialogsPage.messageData.map((m) => {\r\n        return <Messages id={m.id} message={m.message}/>\r\n    })\r\n    const newMessageElement = (formData: FormDataType) => {\r\n        props.addMessage(formData.newMessageBody)\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogElement}\r\n            </div>\r\n            <div className={s.message}>\r\n                {messageElement}\r\n                <AddMessageFormRedux onSubmit={newMessageElement}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst maxLength50 = maxLengthCreator(50)\r\nconst AddMessageForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newMessageBody'}\r\n                       placeholder={'Enter your message'}\r\n                        validate={[requiredField, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>add message</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddMessageFormRedux = reduxForm<FormDataType>({form: 'dialogAddMessageForm'})(AddMessageForm)\r\n\r\nexport default Dialogs;\r\n\r\n\r\n","import React from \"react\";\r\nimport {addMessageAC, dialogsPageTypes} from \"../../Redux/dialogs-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {withRouter} from \"react-router-dom\";\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: dialogsPageTypes\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    addMessage: (currentMessageText: string) => void\r\n}\r\nexport type DialogsContainerType = MapStateToPropsType & MapDispatchPropsType\r\nconst mapStateToProps = (state: AppStateType):MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: Dispatch):MapDispatchPropsType => {\r\n    return {\r\n        addMessage: (text: string)=> {\r\n            dispatch(addMessageAC(text))\r\n        }\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withRouter,\r\n    withAuthRedirect,\r\n    )(Dialogs)\r\n"],"sourceRoot":""}
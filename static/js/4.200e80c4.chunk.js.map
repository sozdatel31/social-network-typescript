{"version":3,"sources":["hoc/withAuthRedirect.tsx","Components/Profile/ProfileInfo/ProfileInfo.module.css","Components/Profile/MyPosts/MyPosts.module.css","Components/Profile/MyPosts/Post/Post.module.css","Components/Profile/ProfileInfo/ProfileStatusWithHook.tsx","Components/Profile/ProfileInfo/ProfileInfo.tsx","Components/Profile/MyPosts/Post/Post.tsx","Components/Profile/MyPosts/MyPosts.tsx","Components/Profile/MyPosts/MyPostsContainer.tsx","Components/Profile/Profile.tsx","Components/Profile/ProfileContainer.tsx"],"names":["mapStateToProps","state","isAuth","auth","withAuthRedirect","Component","connect","props","restProps","to","module","exports","ProfileStatusWithHook","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onChange","e","currentTarget","value","onBlur","updateStatusProfile","type","ProfileInfo","profile","className","s","descriptionBlock","alt","src","photos","large","aboutMe","contacts","facebook","website","github","instagram","youtube","vk","twitter","mainLink","fullName","lookingForAJob","lookingForAJobDescription","Preloader","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","requiredField","MyPosts","postElement","profilePage","postData","map","p","id","formData","addPost","newPostBody","MyPostsContainer","dispatch","updateNewPostText","text","UpdateTextPostAC","currentText","addPostAC","Profile","ProfileContainer","userId","this","match","params","String","authorizedUserId","history","push","getUserProfile","getStatusProfile","React","compose","data","withRouter"],"mappings":"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","file":"static/js/4.200e80c4.chunk.js","sourcesContent":["import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../Redux/redux-store\";\r\n\r\ntype MapStatePropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType):MapStatePropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent = (props: MapStatePropsType) => {\r\n       let {isAuth, ...restProps} = props\r\n        if (!props.isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToProps)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fon\":\"ProfileInfo_fon__2jmk1\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1moDt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"MyPosts_item__3CAPw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__12fVT\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {ProfileType} from \"../../../Redux/profile-reducer\";\r\n\r\n\r\nfunction ProfileStatusWithHook(props: any) {\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [status, setStatus] = useState<string>(props.status)\r\n\r\n    useEffect(()=> {\r\n        setStatus(props.status)\r\n    },[props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatusProfile(status)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{status || \"No status\"}</span>\r\n            </div>\r\n            }\r\n            {editMode &&\r\n            <div><input autoFocus={true}\r\n                        onChange={onStatusChange}\r\n                        onBlur={deactivateEditMode}\r\n                        type=\"text\" value={status}/></div>\r\n            }\r\n        </div>)\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHook;","import React from \"react\";\r\nimport s from \"./ProfileInfo.module.css\"\r\nimport Preloader from \"../../common/preloader/Preloader\";\r\nimport {ProfileType} from \"../../../Redux/profile-reducer\";\r\nimport ProfileStatusWithHook from \"./ProfileStatusWithHook\";\r\n\r\ntype ProfileInfoType = {\r\n    profile: ProfileType | undefined\r\n    status: string\r\n    updateStatusProfile: (status: string) => void\r\n}\r\n\r\nfunction ProfileInfo(props: ProfileInfoType) {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n\r\n        <div>\r\n            {/*<div className={s.fon}><img alt={\"fon\"} src=\"https://avatarko.ru/img/kartinka/33/multfilm_lyagushka_32117.jpg\"/></div>*/}\r\n            <div className={s.descriptionBlock}>\r\n                <img alt={\"avatar\"} src={props.profile.photos.large}/>\r\n                <ProfileStatusWithHook status={props.status} updateStatusProfile={props.updateStatusProfile}/>\r\n                <div>{props.profile.aboutMe}</div>\r\n                <div>{props.profile.contacts.facebook}</div>\r\n                <div>{props.profile.contacts.website}</div>\r\n                <div>{props.profile.contacts.github}</div>\r\n                <div>{props.profile.contacts.instagram}</div>\r\n                <div>{props.profile.contacts.youtube}</div>\r\n                <div>{props.profile.contacts.vk}</div>\r\n                <div>{props.profile.contacts.twitter}</div>\r\n                <div>{props.profile.contacts.mainLink}</div>\r\n                <div>{props.profile.fullName}</div>\r\n                <div>{props.profile.lookingForAJob? \"ищу\" : \"не ищу\"}</div>\r\n                <div>{props.profile.lookingForAJobDescription}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import React from \"react\";\r\nimport s from \"./Post.module.css\"\r\n\r\nexport type PostType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nfunction Post(props: PostType) {\r\n    return (\r\n\r\n        <div className={s.item}>\r\n            <img src=\"https://i.pinimg.com/originals/0c/a9/e2/0ca9e28dcb12dc698cfd2beda6d6fa64.jpg\"/>\r\n            {props.message}\r\n            <div>likes {props.likesCount}</div>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\"\r\nimport Post from \"./Post/Post\";\r\n\r\nimport {MyPostContainerType} from \"./MyPostsContainer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators/validators\";\r\nimport {Textarea} from \"../../common/FormControls/FormsControls\";\r\n\r\ntype FormDataType = {\r\n    newPostBody: string,\r\n}\r\n\r\nfunction MyPosts(props: MyPostContainerType) {\r\n    const postElement = props.profilePage.postData.map((p) => {\r\n        return <Post id={p.id} likesCount={p.likesCount} message={p.message}/>\r\n    })\r\n\r\n    const onAddPost = (formData: FormDataType) => {props.addPost(formData.newPostBody) }\r\n\r\n    return (\r\n        <div>\r\n            <AddPostFormRedux onSubmit={onAddPost}/>\r\n            <h3>My posts</h3>\r\n            <div>New post</div>\r\n            <div className={s.item}>\r\n                {postElement}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\nconst AddPostForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={Textarea}\r\n                       name={'newPostBody'}\r\n                       placeholder={'Enter post message'}\r\n                        validate={[requiredField, maxLength10]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>add Post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm<FormDataType>({form: 'dialogAddPostForm'})(AddPostForm)\r\n\r\nexport default MyPosts;","import React from \"react\";\r\n\r\nimport {addPostAC, PostType, UpdateTextPostAC} from \"../../../Redux/profile-reducer\";\r\nimport {AppStateType} from \"../../../Redux/redux-store\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {Dispatch} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nexport type profilePageType = {\r\n    postData: Array<PostType>\r\n}\r\n\r\n\r\ntype MapStateToPropsType = {\r\n    profilePage: profilePageType\r\n}\r\ntype MapDispatchPropsType = {\r\n    updateNewPostText: (text: string) => void\r\n    addPost: (currentText: string) => void\r\n}\r\nexport type MyPostContainerType = MapStateToPropsType & MapDispatchPropsType\r\nlet mapStateToProps = (state: AppStateType):MapStateToPropsType => {\r\n    return {\r\n        profilePage: state.profilePage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch):MapDispatchPropsType => {\r\n    return {\r\n        updateNewPostText: (text: string)=> {\r\n            dispatch(UpdateTextPostAC(text));\r\n        },\r\n        addPost: (currentText: string)=> {\r\n            dispatch(addPostAC(currentText))\r\n        }\r\n\r\n    }\r\n}\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {profilePageType, ProfileType, updateStatusProfile} from \"../../Redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profile?: ProfileType | undefined,\r\n    status: string,\r\n    updateStatusProfile: (status:string) => void\r\n}\r\n\r\nfunction Profile(props: ProfilePropsType) {\r\n\r\n    return (<div>\r\n        <ProfileInfo profile={props.profile} status={props.status} updateStatusProfile={props.updateStatusProfile}/>\r\n        <MyPostsContainer\r\n        />\r\n    </div>)\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    getStatusProfile,\r\n    getUserProfile,\r\n    PostType,\r\n    profilePageType,\r\n    ProfileType,\r\n    updateStatusProfile\r\n} from \"../../Redux/profile-reducer\";\r\nimport {AppStateType} from \"../../Redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\"\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\ntype ProfileContainerPropsType = MapStatePropsType & MapDispatchPropsType & PropsType\r\n\r\ntype PathParamsType = {\r\n    userId: string ,\r\n}\r\ntype PropsType = RouteComponentProps<PathParamsType>\r\ntype MapStatePropsType = {\r\n    profile?: ProfileType,\r\n    postData: Array<PostType>,\r\n    isAuth: boolean,\r\n    status: string,\r\n    authorizedUserId?: number\r\n}\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: string) => void\r\n    getStatusProfile: (userId: string) => void\r\n    updateStatusProfile: (status:string) => void\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType, profilePageType> {\r\n    componentDidMount(): void {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = String(this.props.authorizedUserId);\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatusProfile(userId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatusProfile = {this.props.updateStatusProfile}\r\n\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    postData: state.profilePage.postData,\r\n    isAuth: state.auth.isAuth,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.data.userId,\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatusProfile, updateStatusProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}